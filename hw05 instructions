// CSE240 
// Be sure to add the standard header above.
// Write the compiler used: Visual studio or gcc (SELECT ONE AND INDICATE)
// READ BEFORE YOU START:
// You are given a partially completed program that creates a linked list of 
//patient records.
// Each record(struct) has this information: student's name, major, school year of 
//student, ID number.
// The struct 'studentRecord' holds information of one student. School year is enum
//type.
// A linked list called 'list' is made to hold the list of students.
// To begin, you should trace through the given code and understand how it works.
// Please read the instructions above each required function and follow the 
//directions carefully.
// You should not modify any of the given code, the return types, or the 
//parameters, you risk getting compile error.
// You are not allowed to modify main ().
// You can use string library functions.
// ***** WRITE COMMENTS FOR IMPORANT STEPS OF YOUR CODE. *****
// ***** GIVE MEANINGFUL NAMES TO VARIABLES. *****

// Q1 : addSort 
// This function is used to insert a new student into the list. You can insert the 
//new student to the end of the linked list.
// Do not allow the student to be added to the list if that student already exists 
//in the list. You can do that by checking the names of the students already in the 
//list.
// If the student already exists then return 0 without adding student to the list. 
//If the student does not exist in the list then go on to add the student at the end 
//of the list and return 1.
// NOTE: You must convert the string 'schoolYear_input' to an enum type and store 
//it in the list because the struct has enum type for school year.
// Sorting should happen within the list. That is, you should not create a new 
//linked list of students having sorted students.
// Hint: One of the string library function can be useful to implement this 
//function because the sorting needs to happen by student name which is a string.
//       Use swapNodes() to swap the nodes in the sorting logic
int addSort(char* studentName_input, char* major_input, char* schoolYear_input, 
unsigned int IDNumber_input) // 20 points
{
struct studentRecord* tempList = list; // work on a copy of 'list'
// enter code here
return 0; // edit this line as needed
}
// Q2 : displayList (10 points)
// This function displays the linked list of students, with all details (struct 
elements). 
// Parse through the linked list and print the student details one after the other.
//See expected output screenshots in homework question file.
// NOTE: School year is stored in the struct as enum type. You need to display a 
//string for school year.
void displayList()
{
struct studentRecord* tempList = list; // work on a copy 
//of 'list'
// enter code here
}
// Q3: countNodes (5 points)
// This function counts the number of students on the linked list and returns the 
//number.
// You may use this function in other functions like deleteNode(), sortList(), 
//addNode(), if needed. 
// It can helpful to call this function in other functions, but not necessary.
// This function is called in main() to display number of students along with the 
//user menu.
int countNodes()
{
return 0; // edit this line as needed
}
// Q4 : deleteNode (10 points)
// This function deletes the node specified by the student name.
// Parse through the linked list and remove the node containing this student name.
// NOTE: After you remove the node, make sure that your linked list is not broken.
// (Hint: Visualize the list as: list......-> node1 -> node_to_remove -> node2 -
> ...end. 
//        After removing "node_to_remove", the list is broken into "list ....node1"
and "node2.... end". Stitch these lists.)
int deleteNode(char* studentName_input)
{
struct studentRecord* tempList = list->next; // work on a
copy of 'list'
return 0; // edit this line as needed
}
// Q5 : swapNodes (5 points)
// This function swaps the elements of parameters 'node1' and 'node2' (Here node1 
//does NOT mean 1st node of the list. 'node1' is just the name of the node)
// This function should not alter the 'next' element of the nodes. Only then will 
//the nodes be swapped.
// Hint: The swap logic is similar to swapping two simple integer/string variables.
// NOTE: This function can be used in the sorting logic in addSort()
void swapNodes(struct studentRecord* node1, struct studentRecord* node2)
{
}
